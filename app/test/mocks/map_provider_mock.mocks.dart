// Mocks generated by Mockito 5.0.16 from annotations
// in clean_the_planet/test/mocks/map_provider_mock.dart.
// Do not manually edit this file.

// ignore_for_file: prefer_void_to_null, unnecessary_question_mark, unnecessary_overrides

import 'dart:async' as _i4;

import 'package:flutter_map/flutter_map.dart' as _i3;
import 'package:latlong2/latlong.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLatLng_0 extends _i1.Fake implements _i2.LatLng {}

class _FakeMoveAndRotateResult_1 extends _i1.Fake
    implements _i3.MoveAndRotateResult {}

class _FakeCenterZoom_2 extends _i1.Fake implements _i3.CenterZoom {}

/// A class which mocks [MapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapController extends _i1.Mock implements _i3.MapController {
  MockMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Null?> get onReady =>
      (super.noSuchMethod(Invocation.getter(#onReady),
          returnValue: Future<Null?>.value()) as _i4.Future<Null?>);
  @override
  _i2.LatLng get center => (super.noSuchMethod(Invocation.getter(#center),
      returnValue: _FakeLatLng_0()) as _i2.LatLng);
  @override
  double get zoom =>
      (super.noSuchMethod(Invocation.getter(#zoom), returnValue: 0.0)
          as double);
  @override
  double get rotation =>
      (super.noSuchMethod(Invocation.getter(#rotation), returnValue: 0.0)
          as double);
  @override
  _i4.Stream<_i3.MapEvent> get mapEventStream => (super.noSuchMethod(
      Invocation.getter(#mapEventStream),
      returnValue: Stream<_i3.MapEvent>.empty()) as _i4.Stream<_i3.MapEvent>);
  @override
  bool move(_i2.LatLng? center, double? zoom, {String? id}) =>
      (super.noSuchMethod(Invocation.method(#move, [center, zoom], {#id: id}),
          returnValue: false) as bool);
  @override
  bool rotate(double? degree, {String? id}) =>
      (super.noSuchMethod(Invocation.method(#rotate, [degree], {#id: id}),
          returnValue: false) as bool);
  @override
  _i3.MoveAndRotateResult moveAndRotate(
          _i2.LatLng? center, double? zoom, double? degree, {String? id}) =>
      (super.noSuchMethod(
          Invocation.method(#moveAndRotate, [center, zoom, degree], {#id: id}),
          returnValue:
              _FakeMoveAndRotateResult_1()) as _i3.MoveAndRotateResult);
  @override
  void fitBounds(_i3.LatLngBounds? bounds, {_i3.FitBoundsOptions? options}) =>
      super.noSuchMethod(
          Invocation.method(#fitBounds, [bounds], {#options: options}),
          returnValueForMissingStub: null);
  @override
  _i3.CenterZoom centerZoomFitBounds(_i3.LatLngBounds? bounds,
          {_i3.FitBoundsOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(
              #centerZoomFitBounds, [bounds], {#options: options}),
          returnValue: _FakeCenterZoom_2()) as _i3.CenterZoom);
  @override
  String toString() => super.toString();
}
